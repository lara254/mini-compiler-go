// Code generated by goyacc - DO NOT EDIT.

package compiler

import __yyfmt__ "fmt"

import (
	"fmt"
	"strconv"
	"strings"
	"text/scanner"
)

type Expression interface{}

type IntLiteral struct {
	Value int
}

type Var struct {
	Name string
}

type Token struct {
	token   int
	literal string
}

type IfExpr struct {
	Cond Expression
	Then Expression
	Else Expression
}

type LetExpr struct {
	Bindings []Binding
	Body     Expression
}

type Binding struct {
	Name  string
	Value Expression
}

type Application struct {
	Func Expression
	Args []Expression
}

type DefineExpr struct {
	Name  string
	Value Expression
}

type BinaryOp struct {
	Operator string
	Left     Expression
	Right    Expression
}

type WhileExpr struct {
	Cnd  Expression
	Body Expression
}
type SetExpr struct {
	Name  string
	Value Expression
}

type BeginExpr struct {
	Exprs []Expression
}

type yySymType struct {
	yys    int
	token  Token
	expr   Expression
	str    string
	intval int
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57361
	yyEofCode = 57344
	BEGIN     = 57360
	DEFINE    = 57355
	EQ        = 57357
	GT        = 57352
	IF        = 57354
	INTEGER   = 57347
	LAMBDA    = 57356
	LET       = 57353
	LPAREN    = 57348
	LT        = 57351
	NAME      = 57346
	PLUS      = 57350
	RPAREN    = 57349
	SET       = 57359
	WHILE     = 57358
	yyErrCode = 57345

	yyMaxDepth = 200
	yyTabOfs   = -17
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		57346: 0,  // NAME (35x)
		57348: 1,  // LPAREN (34x)
		57347: 2,  // INTEGER (32x)
		57349: 3,  // RPAREN (29x)
		57363: 4,  // expr (20x)
		57344: 5,  // $end (14x)
		57364: 6,  // expr_list (3x)
		57360: 7,  // BEGIN (1x)
		57362: 8,  // binding (1x)
		57355: 9,  // DEFINE (1x)
		57352: 10, // GT (1x)
		57354: 11, // IF (1x)
		57353: 12, // LET (1x)
		57351: 13, // LT (1x)
		57350: 14, // PLUS (1x)
		57365: 15, // program (1x)
		57359: 16, // SET (1x)
		57358: 17, // WHILE (1x)
		57361: 18, // $default (0x)
		57357: 19, // EQ (0x)
		57345: 20, // error (0x)
		57356: 21, // LAMBDA (0x)
	}

	yySymNames = []string{
		"NAME",
		"LPAREN",
		"INTEGER",
		"RPAREN",
		"expr",
		"$end",
		"expr_list",
		"BEGIN",
		"binding",
		"DEFINE",
		"GT",
		"IF",
		"LET",
		"LT",
		"PLUS",
		"program",
		"SET",
		"WHILE",
		"$default",
		"EQ",
		"error",
		"LAMBDA",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {15, 1},
		2:  {4, 1},
		3:  {4, 1},
		4:  {4, 7},
		5:  {4, 6},
		6:  {4, 5},
		7:  {4, 4},
		8:  {4, 5},
		9:  {4, 5},
		10: {4, 5},
		11: {4, 5},
		12: {4, 5},
		13: {4, 4},
		14: {8, 4},
		15: {6, 0},
		16: {6, 2},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [53][]uint8{
		// 0
		{21, 22, 20, 4: 19, 15: 18},
		{5: 17},
		{5: 16},
		{15, 15, 15, 15, 5: 15},
		{14, 14, 14, 14, 5: 14},
		// 5
		{21, 22, 20, 4: 26, 7: 32, 9: 25, 29, 24, 23, 28, 27, 16: 31, 30},
		{1: 61},
		{21, 22, 20, 4: 57},
		{54},
		{21, 22, 20, 2, 34, 6: 52},
		// 10
		{21, 22, 20, 4: 49},
		{21, 22, 20, 4: 46},
		{21, 22, 20, 4: 43},
		{21, 22, 20, 4: 40},
		{37},
		// 15
		{21, 22, 20, 2, 34, 6: 33},
		{3: 36},
		{21, 22, 20, 2, 34, 6: 35},
		{3: 1},
		{4, 4, 4, 4, 5: 4},
		// 20
		{21, 22, 20, 4: 38},
		{3: 39},
		{5, 5, 5, 5, 5: 5},
		{21, 22, 20, 4: 41},
		{3: 42},
		// 25
		{6, 6, 6, 6, 5: 6},
		{21, 22, 20, 4: 44},
		{3: 45},
		{7, 7, 7, 7, 5: 7},
		{21, 22, 20, 4: 47},
		// 30
		{3: 48},
		{8, 8, 8, 8, 5: 8},
		{21, 22, 20, 4: 50},
		{3: 51},
		{9, 9, 9, 9, 5: 9},
		// 35
		{3: 53},
		{10, 10, 10, 10, 5: 10},
		{21, 22, 20, 4: 55},
		{3: 56},
		{11, 11, 11, 11, 5: 11},
		// 40
		{21, 22, 20, 4: 58},
		{21, 22, 20, 4: 59},
		{3: 60},
		{12, 12, 12, 12, 5: 12},
		{1: 63, 8: 62},
		// 45
		{3: 67},
		{64},
		{21, 22, 20, 4: 65},
		{3: 66},
		{3: 3},
		// 50
		{21, 22, 20, 4: 68},
		{3: 69},
		{13, 13, 13, 13, 5: 13},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 20

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.expr = yyS[yypt-0].expr
			yylex.(*Lexer).result = yyVAL.expr
		}
	case 2:
		{
			yyVAL.expr = IntLiteral{Value: yyS[yypt-0].intval}
		}
	case 3:
		{
			yyVAL.expr = Var{Name: yyS[yypt-0].str}
		}
	case 4:
		{
			yyVAL.expr = LetExpr{Bindings: []Binding{yyS[yypt-3].expr.(Binding)}, Body: yyS[yypt-1].expr}
		}
	case 5:
		{
			yyVAL.expr = IfExpr{Cond: yyS[yypt-3].expr, Then: yyS[yypt-2].expr, Else: yyS[yypt-1].expr}
		}
	case 6:
		{
			yyVAL.expr = DefineExpr{Name: yyS[yypt-2].str, Value: yyS[yypt-1].expr}
		}
	case 7:
		{
			yyVAL.expr = Application{Func: yyS[yypt-2].expr, Args: yyS[yypt-1].expr.([]Expression)}
		}
	case 8:
		{
			yyVAL.expr = BinaryOp{Operator: "+", Left: yyS[yypt-2].expr, Right: yyS[yypt-1].expr}
		}
	case 9:
		{
			yyVAL.expr = BinaryOp{Operator: "<", Left: yyS[yypt-2].expr, Right: yyS[yypt-1].expr}
		}
	case 10:
		{
			yyVAL.expr = BinaryOp{Operator: ">", Left: yyS[yypt-2].expr, Right: yyS[yypt-1].expr}
		}
	case 11:
		{
			yyVAL.expr = WhileExpr{Cnd: yyS[yypt-2].expr, Body: yyS[yypt-1].expr}
		}
	case 12:
		{
			yyVAL.expr = SetExpr{Name: yyS[yypt-2].str, Value: yyS[yypt-1].expr}
		}
	case 13:
		{
			yyVAL.expr = BeginExpr{Exprs: yyS[yypt-1].expr.([]Expression)}
		}
	case 14:
		{
			yyVAL.expr = Binding{Name: yyS[yypt-2].str, Value: yyS[yypt-1].expr}
		}
	case 15:
		{
			yyVAL.expr = []Expression{}
		}
	case 16:
		{
			yyVAL.expr = append([]Expression{yyS[yypt-1].expr}, yyS[yypt-0].expr.([]Expression)...)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

type Lexer struct {
	scanner.Scanner
	result Expression
}

func (l *Lexer) Lex(lval *yySymType) int {
	tok := l.Scan()
	lit := l.TokenText()

	switch tok {
	case scanner.Int:
		tokVal, _ := strconv.Atoi(lit)
		lval.intval = tokVal
		return INTEGER
	case '(':
		return LPAREN
	case ')':
		return RPAREN
	case scanner.Ident:
		switch lit {
		case "if":
			return IF
		case "let":
			return LET
		case "define":
			return DEFINE
		case "while":
			return WHILE
		case "set":
			return SET
		case "begin":
			return BEGIN
		default:
			lval.str = lit
			return NAME
		}
	case '+':
		return PLUS
	case '<':
		return LT
	case '>':
		return GT
	case '=':
		return EQ
	}

	return 0
}

func (l *Lexer) Error(e string) {
	fmt.Printf("Lex error: %s\n", e)
}

func Parse(input string) (Expression, error) {
	lexer := &Lexer{}
	lexer.Init(strings.NewReader(input))

	if yyParse(lexer) == 0 {
		return lexer.result, nil
	} else {
		return nil, fmt.Errorf("Parsing error")
	}
}
